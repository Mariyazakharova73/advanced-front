{
  "posts": [
    {
      "id": "1",
      "title": "json-server",
      "userId": "1"
    },
    {
      "id": "2",
      "title": "json-server",
      "userId": "2"
    }
  ],
  "articles": [
    {
      "id": "1",
      "title": "Преобразование типов",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1505238680356-667803448bb6?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 7153,
      "createdAt": "06.02.2015",
      "userId": "1",
      "type": ["JS"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Строковое преобразование",
          "paragraphs": [
            "Строковое преобразование происходит, когда требуется представление чего-либо в виде строки. Например, alert(value) преобразует значение к строке.Также мы можем использовать функцию String(value), чтобы преобразовать значение к строке. Преобразование происходит очевидным образом. false становится \"false\", null становится \"null\" и т.п."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "let value = true;\nalert(typeof value); // boolean\nvalue = String(value); // теперь value это строка \"true\"\nalert(typeof value); // string"
        },
        {
          "id": "3",
          "type": "TEXT",
          "title": "Численное преобразование",
          "paragraphs": [
            "Численное преобразование происходит в математических функциях и выражениях. Например, когда операция деления / применяется не к числу"
          ]
        },
        {
          "id": "4",
          "type": "CODE",
          "code": "alert( \"6\" / \"2\" ); // 3, строки преобразуются в числа"
        },
        {
          "id": "5",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
            "Мы можем использовать функцию Number(value), чтобы явно преобразовать value к числу:"
          ]
        },
        {
          "id": "6",
          "type": "CODE",
          "code": "let str = \"123\";\nalert(typeof str); // string\nlet num = Number(str); // становится числом 123\nalert(typeof num); // number"
        },
        {
          "id": "7",
          "type": "TEXT",
          "title": "Логическое преобразование",
          "paragraphs": [
            "Логическое преобразование самое простое. Происходит в логических операциях, но также может быть выполнено явно с помощью функции Boolean(value). Правило преобразования: значения, которые интуитивно «пустые», вроде 0, пустой строки, null, undefined и NaN, становятся false. Все остальные значения становятся true."
          ]
        }
      ]
    },
    {
      "id": "2",
      "title": "Рефы и DOM",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1633356122544-f134324a6cee?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 812,
      "createdAt": "01.03.2020",
      "userId": "2",
      "type": ["REACT"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
            "Рефы дают возможность получить доступ к DOM-узлам или React-элементам, созданным в рендер-методе. В обычном потоке данных React родительские компоненты могут взаимодействовать с дочерними только через пропсы. Чтобы модифицировать потомка, вы должны заново отрендерить его с новыми пропсами. Тем не менее, могут возникать ситуации, когда вам требуется императивно изменить дочерний элемент, обойдя обычный поток данных. Подлежащий изменениям дочерний элемент может быть как React-компонентом, так и DOM-элементом. React предоставляет лазейку для обоих случаев. "
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Когда использовать рефы",
          "paragraphs": [
            "Ситуации, в которых использование рефов является оправданным: yправление фокусом, выделение текста или воспроизведение медиа, императивный вызов анимаций, интеграция со сторонними DOM-библиотеками."
          ]
        },
        {
          "id": "3",
          "type": "TEXT",
          "title": "Не злоупотребляйте рефами",
          "paragraphs": [
            "Возможно, с первого взгляда вам показалось, что рефы применяются, когда нужно решить какую-то задачу в вашем приложении «во что бы то ни стало». Если у вас сложилось такое впечатление, сделайте паузу и обдумайте, где должно храниться конкретное состояние в иерархии компонентов. Часто становится очевидно, что правильным местом для хранения состояния является верхний уровень в иерархии."
          ]
        }
      ]
    },
    {
      "id": "3",
      "title": "Специфичность",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1472437774355-71ab6752b434?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 9455,
      "createdAt": "3.03.2021",
      "userId": "2",
      "type": ["CSS"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Кратко",
          "paragraphs": [
            "Специфичность — это алгоритм, благодаря которому браузер определяет, какие именно стили из всего набора применить к элементу. В вычислениях участвуют CSS-селекторы. Если одному и тому же элементу подходит сразу несколько CSS-правил с разными селекторами, то браузер применяет те стили, вес селектора которых больше. Правило каскада «кто ниже, тот и выигрывает» при этом может нарушаться."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Система расчёта",
          "paragraphs": [
            "Представим любой селектор в виде трёх нулей: 0.0.0. Селекторы по идентификатору увеличивают первую цифру. Селекторы по классу, по атрибуту или псевдокласс увеличивают вторую цифру. Селектор по тегу или псевдоэлемент увеличивают третью цифру. Один селектор равен единице."
          ]
        },
        {
          "id": "2",
          "type": "IMAGE",
          "src": "https://itchief.ru/assets/images/covers/html-and-css-cascade.png",
          "title": "Image 1 - Специфичность"
        }
      ]
    },
    {
      "id": "4",
      "title": "Файл формата HTM — что это?",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1621839673705-6617adf9e890?q=80&w=1932&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 125,
      "createdAt": "1.02.2011",
      "userId": "3",
      "type": ["HTML"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Файл формата HTM — что это?",
          "paragraphs": [
            "Формат HTM относится к языку гипертекстовой разметки, напрямую связан с HTML, который поставляет ресурсы для формирования различных структурированных документов. HTML обозначает структурную текстовую семантику, к которой относятся всевозможные списки, заголовки, абзацы, различные ссылки, а также цитаты и прочие элементы. Достаточно часто файл .htm используют при написании web-страниц для источников сети Всемирной паутины. В более редких случаях расширением .htm пользуются на компьютерной техники, работающей под управлением платформы DOS, ведь такие устройства не могут воспринимать расширения, имеющее более трёх символов. Тип файла кодируется языком разметки HTML и отображаются фактически в любом современном веб-браузере, к примеру Mozilla Firefox, Google Chrome, Internet Explorer, Apple Safari и так далее. Отвечает за форматирование текста, изображений и таблиц, а также остальное содержимое, в котором нуждается та или иная страница сайта. Стоит отметить, что внушительное число интернет-страниц на сегодняшний день включают в себя расширение HTML. Код воспринимается браузерами, после чего разбирается для реализации заложенных в него действий, в большинстве случаев его не видно обычным пользователям. Сохранение происходит в стандартном текстовом формате, а значит открыть файл HTM  возможно в рамках текстового редактора, в этом же случае вам будет доступно и его редактирование. Открыть HTM можно и при помощи такого программного обеспечения, как Adobe Dreamweaver, Microsoft Visual Studio, а также Adobe GoLive и прочих."
          ]
        }
      ]
    },
    {
      "id": "5",
      "title": "Дженерики в TypeScript",
      "subtitle": "",
      "img": "https://bestprogrammer.ru/wp-content/uploads/2020/11/Dlya-chego-ispolzuetsya-TypeScript.jpg",
      "views": 125,
      "createdAt": "1.06.2024",
      "userId": "1",
      "type": ["TS"],
      "blocks": [
        {
          "id": "2",
          "type": "TEXT",
          "title": "Дженерики",
          "paragraphs": [
            "Дженерики, или Generic Types, — обобщенные типы. Они нужны для описания похожих, но отличающихся какими-то характеристиками типов. Мы описываем общую структуру, а конкретную уже определяет пользователь дженерика. Дженерик — это каркас, внутренности которого заполняет разработчик. Программист, который описывает обобщенный тип, никогда не знает, что именно туда решит записать тот, кто будет этот тип использоват"
          ]
        }
      ]
    },
    {
      "id": "6",
      "title": "Преобразование типов",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1505238680356-667803448bb6?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 45,
      "createdAt": "06.02.2019",
      "userId": "1",
      "type": ["JS"],
      "blocks": [
        {
          "id": "2",
          "type": "TEXT",
          "title": "Строковое преобразование",
          "paragraphs": [
            "Строковое преобразование происходит, когда требуется представление чего-либо в виде строки. Например, alert(value) преобразует значение к строке.Также мы можем использовать функцию String(value), чтобы преобразовать значение к строке. Преобразование происходит очевидным образом. false становится \"false\", null становится \"null\" и т.п."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "let value = true;\nalert(typeof value); // boolean\nvalue = String(value); // теперь value это строка \"true\"\nalert(typeof value); // string"
        },
        {
          "id": "3",
          "type": "TEXT",
          "title": "Численное преобразование",
          "paragraphs": [
            "Численное преобразование происходит в математических функциях и выражениях. Например, когда операция деления / применяется не к числу"
          ]
        },
        {
          "id": "4",
          "type": "CODE",
          "code": "alert( \"6\" / \"2\" ); // 3, строки преобразуются в числа"
        },
        {
          "id": "5",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
            "Мы можем использовать функцию Number(value), чтобы явно преобразовать value к числу:"
          ]
        },
        {
          "id": "6",
          "type": "CODE",
          "code": "let str = \"123\";\nalert(typeof str); // string\nlet num = Number(str); // становится числом 123\nalert(typeof num); // number"
        },
        {
          "id": "7",
          "type": "TEXT",
          "title": "Логическое преобразование",
          "paragraphs": [
            "Логическое преобразование самое простое. Происходит в логических операциях, но также может быть выполнено явно с помощью функции Boolean(value). Правило преобразования: значения, которые интуитивно «пустые», вроде 0, пустой строки, null, undefined и NaN, становятся false. Все остальные значения становятся true."
          ]
        }
      ]
    },
    {
      "id": "7",
      "title": "Рефы и DOM",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1633356122544-f134324a6cee?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 82,
      "createdAt": "01.03.2020",
      "userId": "2",
      "type": ["REACT"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
            "Рефы дают возможность получить доступ к DOM-узлам или React-элементам, созданным в рендер-методе. В обычном потоке данных React родительские компоненты могут взаимодействовать с дочерними только через пропсы. Чтобы модифицировать потомка, вы должны заново отрендерить его с новыми пропсами. Тем не менее, могут возникать ситуации, когда вам требуется императивно изменить дочерний элемент, обойдя обычный поток данных. Подлежащий изменениям дочерний элемент может быть как React-компонентом, так и DOM-элементом. React предоставляет лазейку для обоих случаев. "
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Когда использовать рефы",
          "paragraphs": [
            "Ситуации, в которых использование рефов является оправданным: yправление фокусом, выделение текста или воспроизведение медиа, императивный вызов анимаций, интеграция со сторонними DOM-библиотеками."
          ]
        },
        {
          "id": "3",
          "type": "TEXT",
          "title": "Не злоупотребляйте рефами",
          "paragraphs": [
            "Возможно, с первого взгляда вам показалось, что рефы применяются, когда нужно решить какую-то задачу в вашем приложении «во что бы то ни стало». Если у вас сложилось такое впечатление, сделайте паузу и обдумайте, где должно храниться конкретное состояние в иерархии компонентов. Часто становится очевидно, что правильным местом для хранения состояния является верхний уровень в иерархии."
          ]
        }
      ]
    },
    {
      "id": "8",
      "title": "Специфичность",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1472437774355-71ab6752b434?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 45,
      "createdAt": "3.03.2024",
      "userId": "1",
      "type": ["CSS"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Кратко",
          "paragraphs": [
            "Специфичность — это алгоритм, благодаря которому браузер определяет, какие именно стили из всего набора применить к элементу. В вычислениях участвуют CSS-селекторы. Если одному и тому же элементу подходит сразу несколько CSS-правил с разными селекторами, то браузер применяет те стили, вес селектора которых больше. Правило каскада «кто ниже, тот и выигрывает» при этом может нарушаться."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Система расчёта",
          "paragraphs": [
            "Представим любой селектор в виде трёх нулей: 0.0.0. Селекторы по идентификатору увеличивают первую цифру. Селекторы по классу, по атрибуту или псевдокласс увеличивают вторую цифру. Селектор по тегу или псевдоэлемент увеличивают третью цифру. Один селектор равен единице."
          ]
        },
        {
          "id": "2",
          "type": "IMAGE",
          "src": "https://itchief.ru/assets/images/covers/html-and-css-cascade.png",
          "title": "Image 1 - Специфичность"
        }
      ]
    },
    {
      "id": "9",
      "title": "Файл формата HTM — что это?",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1621839673705-6617adf9e890?q=80&w=1932&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 15,
      "createdAt": "7.02.2020",
      "userId": "1",
      "type": ["HTML"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Файл формата HTM — что это?",
          "paragraphs": [
            "Формат HTM относится к языку гипертекстовой разметки, напрямую связан с HTML, который поставляет ресурсы для формирования различных структурированных документов. HTML обозначает структурную текстовую семантику, к которой относятся всевозможные списки, заголовки, абзацы, различные ссылки, а также цитаты и прочие элементы. Достаточно часто файл .htm используют при написании web-страниц для источников сети Всемирной паутины. В более редких случаях расширением .htm пользуются на компьютерной техники, работающей под управлением платформы DOS, ведь такие устройства не могут воспринимать расширения, имеющее более трёх символов. Тип файла кодируется языком разметки HTML и отображаются фактически в любом современном веб-браузере, к примеру Mozilla Firefox, Google Chrome, Internet Explorer, Apple Safari и так далее. Отвечает за форматирование текста, изображений и таблиц, а также остальное содержимое, в котором нуждается та или иная страница сайта. Стоит отметить, что внушительное число интернет-страниц на сегодняшний день включают в себя расширение HTML. Код воспринимается браузерами, после чего разбирается для реализации заложенных в него действий, в большинстве случаев его не видно обычным пользователям. Сохранение происходит в стандартном текстовом формате, а значит открыть файл HTM  возможно в рамках текстового редактора, в этом же случае вам будет доступно и его редактирование. Открыть HTM можно и при помощи такого программного обеспечения, как Adobe Dreamweaver, Microsoft Visual Studio, а также Adobe GoLive и прочих."
          ]
        }
      ]
    },
    {
      "id": "10",
      "title": "Дженерики в TypeScript",
      "subtitle": "",
      "img": "https://bestprogrammer.ru/wp-content/uploads/2020/11/Dlya-chego-ispolzuetsya-TypeScript.jpg",
      "views": 1,
      "createdAt": "15.08.2022",
      "userId": "1",
      "type": ["TS"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Дженерики",
          "paragraphs": [
            "Дженерики, или Generic Types, — обобщенные типы. Они нужны для описания похожих, но отличающихся какими-то характеристиками типов. Мы описываем общую структуру, а конкретную уже определяет пользователь дженерика. Дженерик — это каркас, внутренности которого заполняет разработчик. Программист, который описывает обобщенный тип, никогда не знает, что именно туда решит записать тот, кто будет этот тип использоват"
          ]
        }
      ]
    },
    {
      "id": "11",
      "title": "Преобразование типов",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1505238680356-667803448bb6?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 3,
      "createdAt": "06.02.2019",
      "userId": "1",
      "type": ["JS"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Строковое преобразование",
          "paragraphs": [
            "Строковое преобразование происходит, когда требуется представление чего-либо в виде строки. Например, alert(value) преобразует значение к строке.Также мы можем использовать функцию String(value), чтобы преобразовать значение к строке. Преобразование происходит очевидным образом. false становится \"false\", null становится \"null\" и т.п."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "let value = true;\nalert(typeof value); // boolean\nvalue = String(value); // теперь value это строка \"true\"\nalert(typeof value); // string"
        },
        {
          "id": "3",
          "type": "TEXT",
          "title": "Численное преобразование",
          "paragraphs": [
            "Численное преобразование происходит в математических функциях и выражениях. Например, когда операция деления / применяется не к числу"
          ]
        },
        {
          "id": "4",
          "type": "CODE",
          "code": "alert( \"6\" / \"2\" ); // 3, строки преобразуются в числа"
        },
        {
          "id": "5",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
            "Мы можем использовать функцию Number(value), чтобы явно преобразовать value к числу:"
          ]
        },
        {
          "id": "6",
          "type": "CODE",
          "code": "let str = \"123\";\nalert(typeof str); // string\nlet num = Number(str); // становится числом 123\nalert(typeof num); // number"
        },
        {
          "id": "7",
          "type": "TEXT",
          "title": "Логическое преобразование",
          "paragraphs": [
            "Логическое преобразование самое простое. Происходит в логических операциях, но также может быть выполнено явно с помощью функции Boolean(value). Правило преобразования: значения, которые интуитивно «пустые», вроде 0, пустой строки, null, undefined и NaN, становятся false. Все остальные значения становятся true."
          ]
        }
      ]
    },
    {
      "id": "12",
      "title": "Рефы и DOM",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1633356122544-f134324a6cee?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 55,
      "createdAt": "15.03.2020",
      "userId": "2",
      "type": ["REACT"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
            "Рефы дают возможность получить доступ к DOM-узлам или React-элементам, созданным в рендер-методе. В обычном потоке данных React родительские компоненты могут взаимодействовать с дочерними только через пропсы. Чтобы модифицировать потомка, вы должны заново отрендерить его с новыми пропсами. Тем не менее, могут возникать ситуации, когда вам требуется императивно изменить дочерний элемент, обойдя обычный поток данных. Подлежащий изменениям дочерний элемент может быть как React-компонентом, так и DOM-элементом. React предоставляет лазейку для обоих случаев. "
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Когда использовать рефы",
          "paragraphs": [
            "Ситуации, в которых использование рефов является оправданным: yправление фокусом, выделение текста или воспроизведение медиа, императивный вызов анимаций, интеграция со сторонними DOM-библиотеками."
          ]
        },
        {
          "id": "3",
          "type": "TEXT",
          "title": "Не злоупотребляйте рефами",
          "paragraphs": [
            "Возможно, с первого взгляда вам показалось, что рефы применяются, когда нужно решить какую-то задачу в вашем приложении «во что бы то ни стало». Если у вас сложилось такое впечатление, сделайте паузу и обдумайте, где должно храниться конкретное состояние в иерархии компонентов. Часто становится очевидно, что правильным местом для хранения состояния является верхний уровень в иерархии."
          ]
        }
      ]
    },
    {
      "id": "13",
      "title": "Специфичность",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1472437774355-71ab6752b434?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 111,
      "createdAt": "13.03.2015",
      "userId": "1",
      "type": ["CSS"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Кратко",
          "paragraphs": [
            "Специфичность — это алгоритм, благодаря которому браузер определяет, какие именно стили из всего набора применить к элементу. В вычислениях участвуют CSS-селекторы. Если одному и тому же элементу подходит сразу несколько CSS-правил с разными селекторами, то браузер применяет те стили, вес селектора которых больше. Правило каскада «кто ниже, тот и выигрывает» при этом может нарушаться."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Система расчёта",
          "paragraphs": [
            "Представим любой селектор в виде трёх нулей: 0.0.0. Селекторы по идентификатору увеличивают первую цифру. Селекторы по классу, по атрибуту или псевдокласс увеличивают вторую цифру. Селектор по тегу или псевдоэлемент увеличивают третью цифру. Один селектор равен единице."
          ]
        },
        {
          "id": "2",
          "type": "IMAGE",
          "src": "https://itchief.ru/assets/images/covers/html-and-css-cascade.png",
          "title": "Image 1 - Специфичность"
        }
      ]
    },
    {
      "id": "14",
      "title": "Файл формата HTM — что это?",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1621839673705-6617adf9e890?q=80&w=1932&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 125,
      "createdAt": "4.03.2023",
      "userId": "2",
      "type": ["HTML"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Файл формата HTM — что это?",
          "paragraphs": [
            "Формат HTM относится к языку гипертекстовой разметки, напрямую связан с HTML, который поставляет ресурсы для формирования различных структурированных документов. HTML обозначает структурную текстовую семантику, к которой относятся всевозможные списки, заголовки, абзацы, различные ссылки, а также цитаты и прочие элементы. Достаточно часто файл .htm используют при написании web-страниц для источников сети Всемирной паутины. В более редких случаях расширением .htm пользуются на компьютерной техники, работающей под управлением платформы DOS, ведь такие устройства не могут воспринимать расширения, имеющее более трёх символов. Тип файла кодируется языком разметки HTML и отображаются фактически в любом современном веб-браузере, к примеру Mozilla Firefox, Google Chrome, Internet Explorer, Apple Safari и так далее. Отвечает за форматирование текста, изображений и таблиц, а также остальное содержимое, в котором нуждается та или иная страница сайта. Стоит отметить, что внушительное число интернет-страниц на сегодняшний день включают в себя расширение HTML. Код воспринимается браузерами, после чего разбирается для реализации заложенных в него действий, в большинстве случаев его не видно обычным пользователям. Сохранение происходит в стандартном текстовом формате, а значит открыть файл HTM  возможно в рамках текстового редактора, в этом же случае вам будет доступно и его редактирование. Открыть HTM можно и при помощи такого программного обеспечения, как Adobe Dreamweaver, Microsoft Visual Studio, а также Adobe GoLive и прочих."
          ]
        }
      ]
    },
    {
      "id": "15",
      "title": "Дженерики в TypeScript",
      "subtitle": "",
      "img": "https://bestprogrammer.ru/wp-content/uploads/2020/11/Dlya-chego-ispolzuetsya-TypeScript.jpg",
      "views": 5,
      "createdAt": "31.08.2018",
      "userId": "1",
      "type": ["TS"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Дженерики",
          "paragraphs": [
            "Дженерики, или Generic Types, — обобщенные типы. Они нужны для описания похожих, но отличающихся какими-то характеристиками типов. Мы описываем общую структуру, а конкретную уже определяет пользователь дженерика. Дженерик — это каркас, внутренности которого заполняет разработчик. Программист, который описывает обобщенный тип, никогда не знает, что именно туда решит записать тот, кто будет этот тип использоват"
          ]
        }
      ]
    },
    {
      "id": "16",
      "title": "Преобразование типов",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1505238680356-667803448bb6?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 7,
      "createdAt": "06.09.2019",
      "userId": "1",
      "type": ["JS"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Строковое преобразование",
          "paragraphs": [
            "Строковое преобразование происходит, когда требуется представление чего-либо в виде строки. Например, alert(value) преобразует значение к строке.Также мы можем использовать функцию String(value), чтобы преобразовать значение к строке. Преобразование происходит очевидным образом. false становится \"false\", null становится \"null\" и т.п."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "let value = true;\nalert(typeof value); // boolean\nvalue = String(value); // теперь value это строка \"true\"\nalert(typeof value); // string"
        },
        {
          "id": "3",
          "type": "TEXT",
          "title": "Численное преобразование",
          "paragraphs": [
            "Численное преобразование происходит в математических функциях и выражениях. Например, когда операция деления / применяется не к числу"
          ]
        },
        {
          "id": "4",
          "type": "CODE",
          "code": "alert( \"6\" / \"2\" ); // 3, строки преобразуются в числа"
        },
        {
          "id": "5",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
            "Мы можем использовать функцию Number(value), чтобы явно преобразовать value к числу:"
          ]
        },
        {
          "id": "6",
          "type": "CODE",
          "code": "let str = \"123\";\nalert(typeof str); // string\nlet num = Number(str); // становится числом 123\nalert(typeof num); // number"
        },
        {
          "id": "7",
          "type": "TEXT",
          "title": "Логическое преобразование",
          "paragraphs": [
            "Логическое преобразование самое простое. Происходит в логических операциях, но также может быть выполнено явно с помощью функции Boolean(value). Правило преобразования: значения, которые интуитивно «пустые», вроде 0, пустой строки, null, undefined и NaN, становятся false. Все остальные значения становятся true."
          ]
        }
      ]
    },
    {
      "id": "17",
      "title": "Рефы и DOM",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1633356122544-f134324a6cee?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 82,
      "createdAt": "17.03.2020",
      "userId": "2",
      "type": ["REACT"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "",
          "paragraphs": [
            "Рефы дают возможность получить доступ к DOM-узлам или React-элементам, созданным в рендер-методе. В обычном потоке данных React родительские компоненты могут взаимодействовать с дочерними только через пропсы. Чтобы модифицировать потомка, вы должны заново отрендерить его с новыми пропсами. Тем не менее, могут возникать ситуации, когда вам требуется императивно изменить дочерний элемент, обойдя обычный поток данных. Подлежащий изменениям дочерний элемент может быть как React-компонентом, так и DOM-элементом. React предоставляет лазейку для обоих случаев. "
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Когда использовать рефы",
          "paragraphs": [
            "Ситуации, в которых использование рефов является оправданным: yправление фокусом, выделение текста или воспроизведение медиа, императивный вызов анимаций, интеграция со сторонними DOM-библиотеками."
          ]
        },
        {
          "id": "3",
          "type": "TEXT",
          "title": "Не злоупотребляйте рефами",
          "paragraphs": [
            "Возможно, с первого взгляда вам показалось, что рефы применяются, когда нужно решить какую-то задачу в вашем приложении «во что бы то ни стало». Если у вас сложилось такое впечатление, сделайте паузу и обдумайте, где должно храниться конкретное состояние в иерархии компонентов. Часто становится очевидно, что правильным местом для хранения состояния является верхний уровень в иерархии."
          ]
        }
      ]
    },
    {
      "id": "18",
      "title": "Специфичность",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1472437774355-71ab6752b434?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 95,
      "createdAt": "3.03.2022",
      "userId": "1",
      "type": ["CSS"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Кратко",
          "paragraphs": [
            "Специфичность — это алгоритм, благодаря которому браузер определяет, какие именно стили из всего набора применить к элементу. В вычислениях участвуют CSS-селекторы. Если одному и тому же элементу подходит сразу несколько CSS-правил с разными селекторами, то браузер применяет те стили, вес селектора которых больше. Правило каскада «кто ниже, тот и выигрывает» при этом может нарушаться."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Система расчёта",
          "paragraphs": [
            "Представим любой селектор в виде трёх нулей: 0.0.0. Селекторы по идентификатору увеличивают первую цифру. Селекторы по классу, по атрибуту или псевдокласс увеличивают вторую цифру. Селектор по тегу или псевдоэлемент увеличивают третью цифру. Один селектор равен единице."
          ]
        },
        {
          "id": "2",
          "type": "IMAGE",
          "src": "https://itchief.ru/assets/images/covers/html-and-css-cascade.png",
          "title": "Image 1 - Специфичность"
        }
      ]
    },
    {
      "id": "19",
      "title": "Файл формата HTM — что это?",
      "subtitle": "",
      "img": "https://images.unsplash.com/photo-1621839673705-6617adf9e890?q=80&w=1932&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
      "views": 10,
      "createdAt": "10.02.2023",
      "userId": "1",
      "type": ["HTML"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Файл формата HTM — что это?",
          "paragraphs": [
            "Формат HTM относится к языку гипертекстовой разметки, напрямую связан с HTML, который поставляет ресурсы для формирования различных структурированных документов. HTML обозначает структурную текстовую семантику, к которой относятся всевозможные списки, заголовки, абзацы, различные ссылки, а также цитаты и прочие элементы. Достаточно часто файл .htm используют при написании web-страниц для источников сети Всемирной паутины. В более редких случаях расширением .htm пользуются на компьютерной техники, работающей под управлением платформы DOS, ведь такие устройства не могут воспринимать расширения, имеющее более трёх символов. Тип файла кодируется языком разметки HTML и отображаются фактически в любом современном веб-браузере, к примеру Mozilla Firefox, Google Chrome, Internet Explorer, Apple Safari и так далее. Отвечает за форматирование текста, изображений и таблиц, а также остальное содержимое, в котором нуждается та или иная страница сайта. Стоит отметить, что внушительное число интернет-страниц на сегодняшний день включают в себя расширение HTML. Код воспринимается браузерами, после чего разбирается для реализации заложенных в него действий, в большинстве случаев его не видно обычным пользователям. Сохранение происходит в стандартном текстовом формате, а значит открыть файл HTM  возможно в рамках текстового редактора, в этом же случае вам будет доступно и его редактирование. Открыть HTM можно и при помощи такого программного обеспечения, как Adobe Dreamweaver, Microsoft Visual Studio, а также Adobe GoLive и прочих."
          ]
        }
      ]
    },
    {
      "id": "20",
      "title": "Дженерики в TypeScript",
      "subtitle": "",
      "img": "https://bestprogrammer.ru/wp-content/uploads/2020/11/Dlya-chego-ispolzuetsya-TypeScript.jpg",
      "views": 8,
      "createdAt": "15.08.2018",
      "userId": "1",
      "type": ["TS"],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Дженерики",
          "paragraphs": [
            "Дженерики, или Generic Types, — обобщенные типы. Они нужны для описания похожих, но отличающихся какими-то характеристиками типов. Мы описываем общую структуру, а конкретную уже определяет пользователь дженерика. Дженерик — это каркас, внутренности которого заполняет разработчик. Программист, который описывает обобщенный тип, никогда не знает, что именно туда решит записать тот, кто будет этот тип использоват"
          ]
        }
      ]
    }
  ],
  "comments": [],
  "users": [
    {
      "id": "1",
      "username": "admin",
      "password": "123",
      "roles": ["ADMIN"],
      "avatar": "https://media.istockphoto.com/id/1543077410/ru/%D1%84%D0%BE%D1%82%D0%BE/%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D0%B8%D1%82%D0%B5%D0%BB%D1%8C-%D0%BE%D1%82%D0%B4%D0%B5%D0%BB%D0%B0-%D0%B8%D1%81%D0%BA%D1%83%D1%81%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE-%D0%B8%D0%BD%D1%82%D0%B5%D0%BB%D0%BB%D0%B5%D0%BA%D1%82%D0%B0.jpg?s=1024x1024&w=is&k=20&c=P0m1cg8p5Z1n-RDYYijFR4PJ4kFd3adbs4nZSd5tEH4="
    },
    {
      "id": "2",
      "username": "user",
      "password": "123",
      "roles": ["USER"],
      "avatar": "https://static.standard.co.uk/s3fs-public/thumbnails/image/2016/02/17/10/homersimpson1702a.jpg?width=1200"
    },
    {
      "id": "3",
      "username": "manager",
      "password": "123",
      "roles": ["MANAGER"],
      "avatar": "https://static.standard.co.uk/s3fs-public/thumbnails/image/2016/02/17/10/homersimpson1702a.jpg?width=1200"
    }
  ],
  "profile": [
    {
      "id": "1",
      "first": "Mary",
      "lastname": "React",
      "age": "29",
      "currency": "RUB",
      "country": "Belarus",
      "city": "uiui",
      "username": "user",
      "avatar": "https://media.istockphoto.com/id/1543077410/ru/%D1%84%D0%BE%D1%82%D0%BE/%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D0%B8%D1%82%D0%B5%D0%BB%D1%8C-%D0%BE%D1%82%D0%B4%D0%B5%D0%BB%D0%B0-%D0%B8%D1%81%D0%BA%D1%83%D1%81%D1%81%D1%82%D0%B2%D0%B5%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE-%D0%B8%D0%BD%D1%82%D0%B5%D0%BB%D0%BB%D0%B5%D0%BA%D1%82%D0%B0.jpg?s=1024x1024&w=is&k=20&c=P0m1cg8p5Z1n-RDYYijFR4PJ4kFd3adbs4nZSd5tEH4="
    },
    {
      "id": "2",
      "first": "Pavel",
      "lastname": "P",
      "age": "150",
      "currency": "EUR",
      "country": "Belarus",
      "city": "Minsk",
      "username": "user",
      "avatar": "https://static.standard.co.uk/s3fs-public/thumbnails/image/2016/02/17/10/homersimpson1702a.jpg?width=1200"
    }
  ],
  "notifications": [
    {
      "id": 1,
      "title": "Уведомление 1",
      "description": "Произошло какое-то событие",
      "userId": "1"
    },
    {
      "id": 2,
      "title": "Уведомление 2",
      "description": "Произошло какое-то событие",
      "userId": "1"
    },
    {
      "id": 3,
      "title": "Уведомление 3",
      "description": "Произошло какое-то событие",
      "userId": "1"
    }
  ]
}
